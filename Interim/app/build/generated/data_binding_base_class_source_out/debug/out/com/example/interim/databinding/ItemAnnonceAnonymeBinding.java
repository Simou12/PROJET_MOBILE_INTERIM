// Generated by view binder compiler. Do not edit!
package com.example.interim.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.cardview.widget.CardView;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.interim.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ItemAnnonceAnonymeBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final TextView ContratPub;

  @NonNull
  public final TextView adre;

  @NonNull
  public final CardView card;

  @NonNull
  public final TextView dateDebPub;

  @NonNull
  public final TextView dateFinPub;

  @NonNull
  public final TextView datePublication;

  @NonNull
  public final TextView description;

  @NonNull
  public final TextView descrptiontitle;

  @NonNull
  public final ConstraintLayout layout1;

  @NonNull
  public final ConstraintLayout layoutCache;

  @NonNull
  public final LinearLayout layoutContraty;

  @NonNull
  public final LinearLayout layoutDate;

  @NonNull
  public final LinearLayout layoutLocal;

  @NonNull
  public final LinearLayout layoutRemun;

  @NonNull
  public final TextView nomEmployeurPub;

  @NonNull
  public final TextView nomPostePub;

  @NonNull
  public final ImageView photoProfil;

  @NonNull
  public final Button postuler;

  @NonNull
  public final TextView ref;

  @NonNull
  public final TextView remTitle;

  @NonNull
  public final ImageView share;

  @NonNull
  public final ImageView traduction;

  private ItemAnnonceAnonymeBinding(@NonNull ConstraintLayout rootView,
      @NonNull TextView ContratPub, @NonNull TextView adre, @NonNull CardView card,
      @NonNull TextView dateDebPub, @NonNull TextView dateFinPub, @NonNull TextView datePublication,
      @NonNull TextView description, @NonNull TextView descrptiontitle,
      @NonNull ConstraintLayout layout1, @NonNull ConstraintLayout layoutCache,
      @NonNull LinearLayout layoutContraty, @NonNull LinearLayout layoutDate,
      @NonNull LinearLayout layoutLocal, @NonNull LinearLayout layoutRemun,
      @NonNull TextView nomEmployeurPub, @NonNull TextView nomPostePub,
      @NonNull ImageView photoProfil, @NonNull Button postuler, @NonNull TextView ref,
      @NonNull TextView remTitle, @NonNull ImageView share, @NonNull ImageView traduction) {
    this.rootView = rootView;
    this.ContratPub = ContratPub;
    this.adre = adre;
    this.card = card;
    this.dateDebPub = dateDebPub;
    this.dateFinPub = dateFinPub;
    this.datePublication = datePublication;
    this.description = description;
    this.descrptiontitle = descrptiontitle;
    this.layout1 = layout1;
    this.layoutCache = layoutCache;
    this.layoutContraty = layoutContraty;
    this.layoutDate = layoutDate;
    this.layoutLocal = layoutLocal;
    this.layoutRemun = layoutRemun;
    this.nomEmployeurPub = nomEmployeurPub;
    this.nomPostePub = nomPostePub;
    this.photoProfil = photoProfil;
    this.postuler = postuler;
    this.ref = ref;
    this.remTitle = remTitle;
    this.share = share;
    this.traduction = traduction;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ItemAnnonceAnonymeBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ItemAnnonceAnonymeBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.item_annonce_anonyme, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ItemAnnonceAnonymeBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.ContratPub;
      TextView ContratPub = ViewBindings.findChildViewById(rootView, id);
      if (ContratPub == null) {
        break missingId;
      }

      id = R.id.adre;
      TextView adre = ViewBindings.findChildViewById(rootView, id);
      if (adre == null) {
        break missingId;
      }

      id = R.id.card;
      CardView card = ViewBindings.findChildViewById(rootView, id);
      if (card == null) {
        break missingId;
      }

      id = R.id.dateDebPub;
      TextView dateDebPub = ViewBindings.findChildViewById(rootView, id);
      if (dateDebPub == null) {
        break missingId;
      }

      id = R.id.dateFinPub;
      TextView dateFinPub = ViewBindings.findChildViewById(rootView, id);
      if (dateFinPub == null) {
        break missingId;
      }

      id = R.id.datePublication;
      TextView datePublication = ViewBindings.findChildViewById(rootView, id);
      if (datePublication == null) {
        break missingId;
      }

      id = R.id.description;
      TextView description = ViewBindings.findChildViewById(rootView, id);
      if (description == null) {
        break missingId;
      }

      id = R.id.descrptiontitle;
      TextView descrptiontitle = ViewBindings.findChildViewById(rootView, id);
      if (descrptiontitle == null) {
        break missingId;
      }

      id = R.id.layout1;
      ConstraintLayout layout1 = ViewBindings.findChildViewById(rootView, id);
      if (layout1 == null) {
        break missingId;
      }

      id = R.id.layoutCache;
      ConstraintLayout layoutCache = ViewBindings.findChildViewById(rootView, id);
      if (layoutCache == null) {
        break missingId;
      }

      id = R.id.layoutContraty;
      LinearLayout layoutContraty = ViewBindings.findChildViewById(rootView, id);
      if (layoutContraty == null) {
        break missingId;
      }

      id = R.id.layoutDate;
      LinearLayout layoutDate = ViewBindings.findChildViewById(rootView, id);
      if (layoutDate == null) {
        break missingId;
      }

      id = R.id.layoutLocal;
      LinearLayout layoutLocal = ViewBindings.findChildViewById(rootView, id);
      if (layoutLocal == null) {
        break missingId;
      }

      id = R.id.layoutRemun;
      LinearLayout layoutRemun = ViewBindings.findChildViewById(rootView, id);
      if (layoutRemun == null) {
        break missingId;
      }

      id = R.id.nomEmployeurPub;
      TextView nomEmployeurPub = ViewBindings.findChildViewById(rootView, id);
      if (nomEmployeurPub == null) {
        break missingId;
      }

      id = R.id.nomPostePub;
      TextView nomPostePub = ViewBindings.findChildViewById(rootView, id);
      if (nomPostePub == null) {
        break missingId;
      }

      id = R.id.photoProfil;
      ImageView photoProfil = ViewBindings.findChildViewById(rootView, id);
      if (photoProfil == null) {
        break missingId;
      }

      id = R.id.postuler;
      Button postuler = ViewBindings.findChildViewById(rootView, id);
      if (postuler == null) {
        break missingId;
      }

      id = R.id.ref;
      TextView ref = ViewBindings.findChildViewById(rootView, id);
      if (ref == null) {
        break missingId;
      }

      id = R.id.remTitle;
      TextView remTitle = ViewBindings.findChildViewById(rootView, id);
      if (remTitle == null) {
        break missingId;
      }

      id = R.id.share;
      ImageView share = ViewBindings.findChildViewById(rootView, id);
      if (share == null) {
        break missingId;
      }

      id = R.id.traduction;
      ImageView traduction = ViewBindings.findChildViewById(rootView, id);
      if (traduction == null) {
        break missingId;
      }

      return new ItemAnnonceAnonymeBinding((ConstraintLayout) rootView, ContratPub, adre, card,
          dateDebPub, dateFinPub, datePublication, description, descrptiontitle, layout1,
          layoutCache, layoutContraty, layoutDate, layoutLocal, layoutRemun, nomEmployeurPub,
          nomPostePub, photoProfil, postuler, ref, remTitle, share, traduction);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
